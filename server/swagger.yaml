openapi: 3.0.0
info:
  title: activity-logger API
  description: Node.js + MongoDB - API with email sign-up, verification, authentication and forgot password
  version: 1.0.0

servers:
  - url: http://localhost:4000
    description: Local development server

paths:
  /users/authenticate:
    post:
      summary: Authenticate user credentials and return a JWT token and a cookie with a refresh tokenUser
      tags:
        - auth
      description: Users must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: User details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"
  /users/refresh-token:
    post:
      summary: Use a refresh token to generate a new JWT token and a new refresh token
      tags:
        - auth
      description: The refresh token is sent and returned via cookies.
      operationId: refreshToken
      parameters:
        - in: cookie
          name: refreshToken
          description: The `refreshToken` cookie
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      responses:
        "200":
          description: User details, a JWT access token and a new refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The refresh token is invalid, revoked or expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /users/revoke-token:
    post:
      summary: Revoke a refresh token
      tags:
        - auth
      description: Admin users can revoke the tokens of any user, regular users can only revoke their own tokens.
      operationId: revokeToken
      security:
        - bearerAuth: []
      parameters:
        - in: cookie
          name: refreshToken
          description: The refresh token can be sent in a cookie or the post body, if both are sent the token in the body is used.
          schema:
            type: string
            example: 51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550"
      responses:
        "200":
          description: The refresh token was successfully revoked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token revoked"
        "400":
          description: The refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/register:
    post:
      summary: Register a new user user and send a verification email
      tags:
        - auth
      description: The first user registered in the system is assigned the `Admin` role, other users are assigned the `User` role.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                acceptTerms:
                  type: boolean
              required:
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - acceptTerms
      responses:
        "200":
          description: The registration request was successful and a verification email has been sent to the specified email address
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Registration successful, please check your email for verification instructions"
  /users/verify-email:
    post:
      summary: Verify a new user with a verification token received by email after registration
      tags:
        - auth
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Verification was successful so you can now login to the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification successful, you can now login"
        "400":
          description: Verification failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification failed"
  /users/forgot-password:
    post:
      summary: Submit email address to reset the password on an user
      tags:
        - auth
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
              required:
                - email
      responses:
        "200":
          description: The request was received and an email has been sent to the specified address with password reset instructions (if the email address is associated with an user)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please check your email for password reset instructions"
  /users/validate-reset-token:
    post:
      summary: Validate the reset password token received by email after submitting to the /users/forgot-password route
      tags:
        - auth
      operationId: validateResetToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
              required:
                - token
      responses:
        "200":
          description: Token is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Token is valid"
        "400":
          description: Token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /users/reset-password:
    post:
      summary: Reset the password for an user
      tags:
        - auth
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "3c7f8d9c4cb348ff95a0b74a1452aa24fc9611bb76768bb9eafeeb826ddae2935f1880bc7713318f"
                password:
                  type: string
                  example: "newPass123"
                confirmPassword:
                  type: string
                  example: "newPass123"
              required:
                - token
                - password
                - confirmPassword
      responses:
        "200":
          description: Password reset was successful so you can now login to the user with the new password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful, you can now login"
        "400":
          description: Password reset failed due to an invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
  /users:
    get:
      summary: Get a list of all users
      tags:
        - users
      description: Restricted to admin users.
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    firstName:
                      type: string
                      example: "Jason"
                    lastName:
                      type: string
                      example: "Watmore"
                    email:
                      type: string
                      example: "jason@example.com"
                    role:
                      type: string
                      example: "Admin"
                    created:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    updated:
                      type: string
                      example: "2020-05-08T03:11:21.553Z"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new user
      tags:
        - users
      description: Restricted to admin users.
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, User]
              required:
                - firstName
                - lastName
                - email
                - password
                - confirmPassword
                - role
      responses:
        "200":
          description: User created successfully, verification is not required for users created with this endpoint. The details of the new user are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
        "400":
          description: Email is already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email 'jason@example.com' is already registered"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single user by id
      tags:
        - users
      description: Admin users can access any user, regular users are restricted to their own user.
      operationId: getUserById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update an user
      tags:
        - users
      description: Admin users can update any user including role, regular users are restricted to their own user and cannot update role.
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: "Jason"
                lastName:
                  type: string
                  example: "Watmore"
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
                confirmPassword:
                  type: string
                  example: "pass123"
                role:
                  type: string
                  enum: [Admin, User]
      responses:
        "200":
          description: User updated successfully. The details of the updated user are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  updated:
                    type: string
                    example: "2020-05-08T03:11:21.553Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete an user
      tags:
        - users
      description: Admin users can delete any user, regular users are restricted to their own user.
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{userId}/log-events:
    parameters:
      - in: path
        name: userId
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a list of all log events for the specified user
      tags:
        - users/log-events
      description: Admin users can access any user, regular users are restricted to their own user..
      operationId: getAllLogEventsForUser
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all log event for an user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    userId:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    date:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    isWorkout:
                      type: boolean
                      example: true
                    challenge:
                      type: string
                      example: "standard"
                    activity:
                      type: object
                      properties:
                        duration:
                          type: object
                          properties:
                            hours:
                              type: string
                              example: "2"
                            minutes:
                              type: string
                              example: "30"
                            seconds:
                              type: string
                              example: "45"
                        distance:
                          type: number
                          example: 10
                        couponWeight:
                          type: number
                          example: 20
                        ruckWeight:
                          type: number
                          example: 35
                        notes:
                          type: string
                          example: "Additional comments"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new log event assigned to a user.
      tags:
        - users/log-events
      description: Admin users can access any user, regular users are restricted to their own user..
      operationId: createUserLogEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: "2020-05-05T09:12:57.848Z"
                isWorkout:
                  type: boolean
                  example: true
                challenge:
                  type: string
                  example: "standard"
                activity:
                  type: object
                  properties:
                    duration:
                      type: object
                      properties:
                        hours:
                          type: string
                          example: "2"
                        minutes:
                          type: string
                          example: "30"
                        seconds:
                          type: string
                          example: "45"
                    distance:
                      type: number
                      example: 10
                    couponWeight:
                      type: number
                      example: 20
                    ruckWeight:
                      type: number
                      example: 35
                    notes:
                      type: string
                      example: "Additional comments"
              required:
                - date
      responses:
        "200":
          description: Log event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "400":
          description: Invalid userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User ID invalid"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /users/{userId}/log-events/{eventId}:
    parameters:
      - in: path
        name: userId
        description: User id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
      - in: path
        name: eventId
        description: Log event id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single user's log event by id
      tags:
        - users/log-events
      description: Admin users can access any user, regular users are restricted to their own user..
      operationId: getUserLogEventById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified log event
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update a log event
      tags:
        - users/log-events
      description: Admin users can access any user, regular users are restricted to their own user.
      operationId: updateUserLogEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  example: "2020-05-05T09:12:57.848Z"
                isWorkout:
                  type: boolean
                  example: true
                challenge:
                  type: string
                  example: "standard"
                activity:
                  type: object
                  properties:
                    duration:
                      type: object
                      properties:
                        hours:
                          type: string
                          example: "2"
                        minutes:
                          type: string
                          example: "30"
                        seconds:
                          type: string
                          example: "45"
                    distance:
                      type: number
                      example: 10
                    couponWeight:
                      type: number
                      example: 20
                    ruckWeight:
                      type: number
                      example: 35
                    notes:
                      type: string
                      example: "Additional comments"
      responses:
        "200":
          description: Log event updated successfully. The details of the updated log event are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a log event
      tags:
        - users/log-events
      description: Restricted to Admin users can access any user, regular users are restricted to their own user.
      operationId: deleteUserLogEvent
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Log event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Log event deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /log-events:
    get:
      summary: Get a list of all log events
      tags:
        - log-events
      description: Restricted to admin users.
      operationId: getAllLogEvents
      security:
        - bearerAuth: []
      responses:
        "200":
          description: An array of all log events
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    userId:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    date:
                      type: string
                      example: "2020-05-05T09:12:57.848Z"
                    isWorkout:
                      type: boolean
                      example: true
                    challenge:
                      type: string
                      example: "standard"
                    activity:
                      type: object
                      properties:
                        duration:
                          type: object
                          properties:
                            hours:
                              type: string
                              example: "2"
                            minutes:
                              type: string
                              example: "30"
                            seconds:
                              type: string
                              example: "45"
                        distance:
                          type: number
                          example: 10
                        couponWeight:
                          type: number
                          example: 20
                        ruckWeight:
                          type: number
                          example: 35
                        notes:
                          type: string
                          example: "Additional comments"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      summary: Create a new log event
      tags:
        - log-events
      description: Restricted to admin users.
      operationId: createLogEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                date:
                  type: string
                  example: "2020-05-05T09:12:57.848Z"
                isWorkout:
                  type: boolean
                  example: true
                challenge:
                  type: string
                  example: "standard"
                activity:
                  type: object
                  properties:
                    duration:
                      type: object
                      properties:
                        hours:
                          type: string
                          example: "2"
                        minutes:
                          type: string
                          example: "30"
                        seconds:
                          type: string
                          example: "45"
                    distance:
                      type: number
                      example: 10
                    couponWeight:
                      type: number
                      example: 20
                    ruckWeight:
                      type: number
                      example: 35
                    notes:
                      type: string
                      example: "Additional comments"
              required:
                - userId
                - date
      responses:
        "200":
          description: Log event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "400":
          description: Invalid userId
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User ID invalid"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /log-events/{eventId}:
    parameters:
      - in: path
        name: eventId
        description: Log event id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single log event by id
      tags:
        - log-events
      description: Restricted to authenticated users
      operationId: getLogEventById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified log event
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update a log event
      tags:
        - log-events
      description: Restricted to admin users
      operationId: updateLogEvent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                userId:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                date:
                  type: string
                  example: "2020-05-05T09:12:57.848Z"
                isWorkout:
                  type: boolean
                  example: true
                challenge:
                  type: string
                  example: "standard"
                activity:
                  type: object
                  properties:
                    duration:
                      type: object
                      properties:
                        hours:
                          type: string
                          example: "2"
                        minutes:
                          type: string
                          example: "30"
                        seconds:
                          type: string
                          example: "45"
                    distance:
                      type: number
                      example: 10
                    couponWeight:
                      type: number
                      example: 20
                    ruckWeight:
                      type: number
                      example: 35
                    notes:
                      type: string
                      example: "Additional comments"
      responses:
        "200":
          description: Log event updated successfully. The details of the updated log event are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  userId:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  date:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isWorkout:
                    type: boolean
                    example: true
                  challenge:
                    type: string
                    example: "standard"
                  activity:
                    type: object
                    properties:
                      duration:
                        type: object
                        properties:
                          hours:
                            type: string
                            example: "2"
                          minutes:
                            type: string
                            example: "30"
                          seconds:
                            type: string
                            example: "45"
                      distance:
                        type: number
                        example: 10
                      couponWeight:
                        type: number
                        example: 20
                      ruckWeight:
                        type: number
                        example: 35
                      notes:
                        type: string
                        example: "Additional comments"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a log event
      tags:
        - log-events
      description: Restricted to admin users
      operationId: deleteLogEvent
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Log event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Log event deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /challenges:
      get:
        summary: Get a list of all challenges
        tags:
          - challenges
        description: Restricted to authenticated users.
        operationId: getAllChallenges
        security:
          - bearerAuth: []
        responses:
          "200":
            description: An array of all challenges
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "5eb12e197e06a76ccdefc121"
                      name:
                        type: string
                        example: "Go Ruck January 2021"
                      startDate:
                        type: string
                        example: "2021-01-01T00:00:00.000Z"
                      endDate:
                        type: string
                        example: "2021-02-01T00:00:00.000Z"
          "401":
            $ref: "#/components/responses/UnauthorizedError"
      post:
        summary: Create a new challenge
        tags:
          - challenges
        description: Restricted to admin users.
        operationId: createChallenge
        security:
          - bearerAuth: []
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "Go Ruck January 2021"
                  startDate:
                    type: string
                    example: "2021-01-01T00:00:00.000Z"
                  endDate:
                    type: string
                    example: "2021-02-01T00:00:00.000Z"
                required:
                  - name
                  - startDate
                  - endDate
        responses:
          "200":
            description: Log event created successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "5eb12e197e06a76ccdefc121"
                    name:
                      type: string
                      example: "Go Ruck January 2021"
                    startDate:
                      type: string
                      example: "2021-01-01T00:00:00.000Z"
                    endDate:
                      type: string
                      example: "2021-02-01T00:00:00.000Z"
          "401":
            $ref: "#/components/responses/UnauthorizedError"
  /challenges/{challengeId}:
    parameters:
      - in: path
        name: challengeId
        description: Challenge id
        required: true
        example: "5eb12e197e06a76ccdefc121"
        schema:
          type: string
    get:
      summary: Get a single challenge by id
      tags:
        - challenges
      description: Restricted to authenticated users
      operationId: getChallengeById
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Details of the specified challenge
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  name:
                    type: string
                    example: "Go Ruck January 2021"
                  startDate:
                    type: string
                    example: "2021-01-01T00:00:00.000Z"
                  endDate:
                    type: string
                    example: "2021-02-01T00:00:00.000Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    put:
      summary: Update a challenge
      tags:
        - challenges
      description: Restricted to admin users
      operationId: updateChallenge
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "5eb12e197e06a76ccdefc121"
                name:
                  type: string
                  example: "Go Ruck January 2021"
                startDate:
                  type: string
                  example: "2021-01-01T00:00:00.000Z"
                endDate:
                  type: string
                  example: "2021-02-01T00:00:00.000Z"
      responses:
        "200":
          description: Log event updated successfully. The details of the updated challenge are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  name:
                    type: string
                    example: "Go Ruck January 2021"
                  startDate:
                    type: string
                    example: "2021-01-01T00:00:00.000Z"
                  endDate:
                    type: string
                    example: "2021-02-01T00:00:00.000Z"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      summary: Delete a challenge
      tags:
        - challenges
      description: Restricted to admin users
      operationId: deleteChallenge
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Challenge deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Challenge deleted successfully"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"